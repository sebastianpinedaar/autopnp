cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

# add include search paths
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/ros/include ${PROJECT_SOURCE_DIR}/common/include)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()

find_package(PCL 1.2 REQUIRED)

#add dynamic reconfigure api
rosbuild_find_ros_package(dynamic_reconfigure)
include(${dynamic_reconfigure_PACKAGE_PATH}/cmake/cfgbuild.cmake)
gencfg()

rosbuild_add_boost_directories()

#rosbuild_add_executable(dirt_detection  ros/src/dirt_detection.cpp
#										common/src/timer.cpp
#										ros/src/label_box.cpp)
#rosbuild_link_boost(dirt_detection filesystem system)

rosbuild_add_executable(dirt_detection_client  ros/src/dirt_detection_client_main.cpp)

rosbuild_add_executable(appearance_check  ros/src/appearance_check.cpp)

rosbuild_add_executable(rgbd_recording ros/src/rgbd_recording.cpp)




#rosbuild_add_compile_flags(dirt_detection -D__LINUX__)


include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})


rosbuild_add_executable(rgbd_recording ros/src/rgbd_recording.cpp)




#target_link_libraries(rgbd_recording ${PCL_LIBRARIES})



rosbuild_add_executable(hog_training ros/src/hog_training.cpp ros/src/training.cpp)

rosbuild_add_executable(error_test ros/src/error_test.cpp ros/src/training.cpp)

rosbuild_add_executable(hog_recognizer ros/src/hog_recognizer.cpp)


#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})
